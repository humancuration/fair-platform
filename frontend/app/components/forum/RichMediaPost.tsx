import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { 
  FaImage, FaVideo, FaMusic, FaCode, FaDatabase, 
  FaBrain, FaNetworkWired, FaGlobe, FaRetweet 
} from "react-icons/fa";
import { CodeViewer } from "~/components/common/CodeViewer";
import { MediaGallery } from "~/components/common/MediaGallery";
import { DataVisualizer } from "~/components/common/DataVisualizer";
import { NetworkGraph } from "~/components/common/NetworkGraph";
import type { MediaAttachment, SemanticLink } from "~/types/forum";

interface RichMediaPostProps {
  content: string;
  contentType: 'text' | 'code' | 'data' | 'media' | 'thread';
  mediaAttachments?: MediaAttachment[];
  semanticLinks?: SemanticLink[];
  federatedWith?: string[];
  aiGenerated?: boolean;
  aiMetadata?: {
    model: string;
    confidence: number;
    reasoningChain?: string[];
  };
  onMediaClick?: (media: MediaAttachment) => void;
  onSemanticLinkClick?: (link: SemanticLink) => void;
}

export function RichMediaPost({
  content,
  contentType,
  mediaAttachments = [],
  semanticLinks = [],
  federatedWith = [],
  aiGenerated,
  aiMetadata,
  onMediaClick,
  onSemanticLinkClick
}: RichMediaPostProps) {
  const [showReasoningChain, setShowReasoningChain] = useState(false);
  const [showSemanticGraph, setShowSemanticGraph] = useState(false);

  return (
    <div className="space-y-4">
      {/* Content Section */}
      <div className="prose dark:prose-invert max-w-none">
        {contentType === 'code' ? (
          <CodeViewer 
            code={content} 
            language="typescript"
            showLineNumbers
            highlightLines={aiGenerated ? aiMetadata?.reasoningChain?.map(
              (_, i) => i + 1
            ) : undefined}
          />
        ) : contentType === 'data' ? (
          <DataVisualizer 
            data={JSON.parse(content)}
            type="json"
            interactive
          />
        ) : contentType === 'thread' ? (
          <div className="space-y-2">
            {content.split('\n\n').map((paragraph, i) => (
              <p key={i} className="leading-relaxed">{paragraph}</p>
            ))}
          </div>
        ) : (
          <p className="whitespace-pre-wrap">{content}</p>
        )}
      </div>

      {/* Media Gallery */}
      {mediaAttachments.length > 0 && (
        <MediaGallery
          items={mediaAttachments}
          onItemClick={onMediaClick}
          layout={mediaAttachments.length > 2 ? 'grid' : 'row'}
          aspectRatio={mediaAttachments.length === 1 ? 'original' : '16/9'}
        />
      )}

      {/* AI Metadata */}
      {aiGenerated && aiMetadata && (
        <motion.div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FaBrain className="text-purple-500" />
              <span className="text-sm font-medium">
                Generated by {aiMetadata.model}
              </span>
              <span className="text-sm text-purple-600 dark:text-purple-400">
                {(aiMetadata.confidence * 100).toFixed(1)}% confidence
              </span>
            </div>
            {aiMetadata.reasoningChain && (
              <button
                onClick={() => setShowReasoningChain(!showReasoningChain)}
                className="text-sm text-purple-600 dark:text-purple-400 hover:underline"
              >
                View Reasoning Chain
              </button>
            )}
          </div>

          <AnimatePresence>
            {showReasoningChain && aiMetadata.reasoningChain && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                className="mt-4"
              >
                <ol className="list-decimal list-inside space-y-2">
                  {aiMetadata.reasoningChain.map((step, i) => (
                    <li key={i} className="text-sm text-purple-700 dark:text-purple-300">
                      {step}
                    </li>
                  ))}
                </ol>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      )}

      {/* Federation Info */}
      {federatedWith.length > 0 && (
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <FaGlobe />
          <span>Federated with {federatedWith.length} instances</span>
          <button
            onClick={() => setShowSemanticGraph(!showSemanticGraph)}
            className="ml-auto flex items-center gap-1 text-blue-500 hover:underline"
          >
            <FaNetworkWired />
            View Network
          </button>
        </div>
      )}

      {/* Semantic Network Graph */}
      <AnimatePresence>
        {showSemanticGraph && semanticLinks.length > 0 && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 300, opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            className="border rounded-lg overflow-hidden"
          >
            <NetworkGraph
              nodes={semanticLinks.map(link => ({
                id: link.targetId,
                label: link.type,
                group: link.category
              }))}
              edges={semanticLinks.map(link => ({
                from: 'current',
                to: link.targetId,
                label: link.relationship,
                value: link.strength
              }))}
              onNodeClick={(nodeId) => {
                const link = semanticLinks.find(l => l.targetId === nodeId);
                if (link) onSemanticLinkClick?.(link);
              }}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
