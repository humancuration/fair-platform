name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yourdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install Dependencies
        run: npm install
        working-directory: ./backend
      - name: Run Tests
        env:
          DB_HOST: localhost  # Changed to localhost for CI environment
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: yourdb
          JWT_SECRET: your_jwt_secret
          BASE_URL: http://localhost:5000
        run: npm test
        working-directory: ./backend
      - name: Lint Backend Code
        run: npm run lint
        working-directory: ./backend
      - name: Run Backend Tests with Coverage
        run: npm test -- --coverage
        working-directory: ./backend

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend
      - name: Run Tests
        run: npm test
        working-directory: ./frontend
      - name: Lint Frontend Code
        run: npm run lint
        working-directory: ./frontend
      - name: Run Frontend Tests with Coverage
        run: npm test -- --coverage
        working-directory: ./frontend

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: yourdockerhubusername/fairplatform-backend:latest
      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: yourdockerhubusername/fairplatform-frontend:latest
